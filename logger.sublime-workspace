{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fun",
				"function"
			],
			[
				"profile",
				"profileEnd"
			],
			[
				"co",
				"component"
			],
			[
				"group",
				"groupEnd"
			],
			[
				"to",
				"toLowerCase"
			],
			[
				"proto",
				"prototype"
			],
			[
				"pto",
				"prototype"
			],
			[
				"lo",
				"logType"
			],
			[
				"logg",
				"loggerBuffer"
			],
			[
				"logger",
				"loggerBuffer"
			],
			[
				"l",
				"loggerBuffer"
			],
			[
				"Logger",
				"loggerBuffer"
			],
			[
				"Logg",
				"LoggerEnum"
			],
			[
				"_",
				"_setBufferLimit"
			],
			[
				"time",
				"timeMap"
			],
			[
				"http",
				"httpBackend"
			],
			[
				"buff",
				"bufferLogs"
			],
			[
				"buffer",
				"bufferLogs"
			],
			[
				"bu",
				"bufferLogs"
			],
			[
				"tim",
				"timeVar"
			],
			[
				"clean",
				"cleanBuffer"
			],
			[
				"swi",
				"switchLogId"
			],
			[
				"grou",
				"groupCollapsed"
			],
			[
				"war",
				"warnVar"
			],
			[
				"cou",
				"countVar"
			],
			[
				"wan",
				"warnVar"
			],
			[
				"profi",
				"profileCountVar"
			],
			[
				"pro",
				"profileCountVar"
			],
			[
				"log",
				"logVar"
			],
			[
				"info",
				"infoVar"
			],
			[
				"error",
				"errorVar"
			],
			[
				"tra",
				"traceVar"
			],
			[
				"Lo",
				"LoggerEnum"
			],
			[
				"s",
				"SilentLogger"
			],
			[
				"si",
				"silentMode"
			],
			[
				"Sil",
				"SilentLogger"
			],
			[
				"print",
				"print"
			],
			[
				"queue",
				"queue_get"
			],
			[
				"sem",
				"sem_post"
			],
			[
				"ta",
				"tails"
			],
			[
				"kill",
				"killPipes"
			],
			[
				"re",
				"removedChilds"
			],
			[
				"n",
				"nChilds"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"border-s",
				"border-style"
			],
			[
				"bor",
				"border"
			],
			[
				"border-c",
				"border-color"
			],
			[
				"json",
				"json_encode"
			],
			[
				"array",
				"array_push"
			],
			[
				"ca",
				"carrinhos"
			],
			[
				"c",
				"carroB"
			],
			[
				"min",
				"min-width"
			],
			[
				"b",
				"border-radius"
			],
			[
				"bo",
				"border"
			],
			[
				"pa",
				"padding"
			],
			[
				"font",
				"font-size"
			],
			[
				"paddin",
				"padding-top"
			],
			[
				"backgrou",
				"background-color"
			],
			[
				"back",
				"background-color"
			],
			[
				"padding",
				"padding-left"
			],
			[
				"inl",
				"inline-block"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "if (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(this instanceof fNOP && oThis\n                 ? this\n                 : oThis,\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\nError.captureStackTrace = function(obj, val) {\n\n  obj.stack = \"Stack\"\n  return obj\n}\n\nfunction mapInject(map){\n\n    map = map || []\n    map = map.concat([\n        '$timeout'\n    ,   '$httpBackend'\n    ,   '$injector'\n    ,   '$controller'\n    ,   '$rootScope'\n    ])\n\n    var deps = {}\n    for(key in map) {\n\n        inject([map[key], function(dep){\n\n            deps[map[key]] = dep\n        }])\n    }\n\n    return deps\n}\n\nvar __evokeId = 0\nfunction evoke(modulename, arg1, arg2){\n\n    var deps = []\n    ,   callback = angular.noop\n\n    switch(arguments.length) {\n\n        case 2:\n            callback = arg1\n            break;\n\n        case 3:\n            deps = arg1\n            callback = arg2\n            break;\n    }\n\n    describe(['Module', modulename].join(' '), function(ns){\n\n        var ns = {i : {}}\n\n        beforeEach(function(){\n\n            var id = \"evoke_\" + (++__evokeId)\n\n            angular.module(id, [modulename])\n\n            module(id)\n            ns.i = mapInject(deps)\n\n        })\n\n        callback(ns)\n    })\n}",
			"file": "/Users/Taveira/Desktop/dev/alert/asgard/scenario.js",
			"file_size": 1789,
			"file_write_time": 1408608801000000,
			"settings":
			{
				"buffer_size": 1789,
				"line_ending": "Unix"
			}
		},
		{
			"file": "logger.sublime-project",
			"settings":
			{
				"buffer_size": 65,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "readme.md",
			"file_size": 0,
			"file_write_time": 1408625292000000,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "angular.module(\"odin.logger\")\n\n.constant('LoggerEnum', Object.freeze({\n\n    MODE : {\n        SILENT : \"silent\"\n    ,   NOISY  : \"noisy\"\n    }\n\n,   LOGTYPE : {\n        COMPONENT   : \"component\"\n    ,   SOURCE      : \"source\"\n    ,   PERFORMANCE : \"performance\"\n    }\n}))\n\n.factory(\"logger\", [\n\n    \"LoggerEnum\"\n,   \"loggerBuffer\"\n\n,   function(LoggerEnum, loggerBuffer){\n\n    function Logger(){\n\n        this.mode    = LoggerEnum.MODE.SILENT\n        this.logType = LoggerEnum.LOGTYPE.COMPONENT\n        this.logId   = undefined\n    }\n\n    Logger.prototype = {\n\n        constructor : Logger\n\n    ,   silentMode : function(){\n\n            this.mode = LoggerEnum.MODE.SILENT\n        }\n\n    ,   noisyMode : function(){\n\n            this.mode = LoggerEnum.MODE.NOISY\n        }\n\n    ,   setLoggerBufferLimit : function(limit){\n\n            loggerBuffer._setBufferLimit(limit)\n        }\n\n    ,   switchLogType : function(logType){\n\n            if(logType == \"component\" \n            || logType == \"source\" \n            || logType == \"performance\")\n                this.logType = logType\n\n            else\n                return\n\n            // istanbul ignore else\n            if(this.mode == LoggerEnum.MODE.NOISY)\n                console.log(this.logType + \" Mode testing enabled!\")\n        }\n\n    ,   switchLogId : function(logId){\n\n            this.logId = logId\n\n            // istanbul ignore else\n            if(this.mode == LoggerEnum.MODE.NOISY)\n                console.log(this.logId + \" Id testing enabled!\")\n        }\n\n    ,   isValid : function(logId, type){\n\n            return type == this.logType && (this.logId == undefined || logId == this.logId)\n        }\n\n    ,   clear : function(){\n\n            // istanbul ignore else\n            if(this.mode == LoggerEnum.MODE.NOISY)\n                console.clear()\n            return this\n        }\n\n    ,   count : function(logId, type, label){\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.count(label)\n            return this\n        }\n\n    ,   error : function(){\n\n            var arguments = Array.prototype.slice.call(arguments, 0)\n            var logId     = arguments[0]\n            var type      = arguments[1]\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.error.apply(console, arguments.slice(2))\n\n            loggerBuffer._addToBuffer({\n                status  : \"Error\"\n            ,   date    : new Date()\n            ,   type    : type\n            ,   id      : logId\n            ,   msg     : arguments.slice(2).join(\" \")\n            })\n\n            return this\n        }\n\n    ,   group : function(){\n\n            var arguments = Array.prototype.slice.call(arguments, 0)\n            var logId     = arguments[0]\n            var type      = arguments[1]\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.group.apply(console, arguments.slice(2))\n            return this\n        }\n\n    ,   groupCollapsed : function(){\n\n            var arguments = Array.prototype.slice.call(arguments, 0)\n            var logId     = arguments[0]\n            var type      = arguments[1]\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.groupCollapsed.apply(console, arguments.slice(2))\n            return this\n        }\n\n    ,   groupEnd : function(logId, type){\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.groupEnd()\n            return this\n        }\n\n    ,   info : function(){\n\n            var arguments = Array.prototype.slice.call(arguments, 0)\n            var logId     = arguments[0]\n            var type      = arguments[1]\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.info.apply(console, arguments.slice(2))\n\n            loggerBuffer._addToBuffer({\n                status  : \"Info\"\n            ,   date    : new Date()\n            ,   type    : type\n            ,   id      : logId\n            ,   msg     : arguments.slice(2).join(\" \")\n            })\n\n            return this\n        }\n\n    ,   log : function(){\n            var arguments = Array.prototype.slice.call(arguments, 0)\n            var logId     = arguments[0]\n            var type      = arguments[1]\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.log.apply(console, arguments.slice(2))\n\n            loggerBuffer._addToBuffer({\n                status  : \"Log\"\n            ,   date    : new Date()\n            ,   type    : type\n            ,   id      : logId\n            ,   msg     : arguments.slice(2).join(\" \")\n            })\n\n            return this\n        }\n\n    ,   profile : function(logId, type, label){\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.profile(label)\n            return this\n        }\n\n    ,   profileEnd : function(logId, type){\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.profileEnd()\n            return this\n        }\n\n    ,   time : function(logId, type, label){\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.time(label)\n\n            if(loggerBuffer.timeMap[label] == undefined){\n\n                loggerBuffer.timeMap[label] = (new Date).getTime()\n                loggerBuffer._addToBuffer({\n                    status  : \"Time\"\n                ,   date    : new Date()\n                ,   type    : type\n                ,   id      : logId\n                ,   msg     : label + \" : timer started!\"\n                })\n            }\n\n            else\n                loggerBuffer._addToBuffer({\n                    status  : \"Time\"\n                ,   date    : new Date()\n                ,   type    : type\n                ,   id      : logId\n                ,   msg     : label + \" : timer has already been initialized!\"\n                })\n\n            return this\n        }\n\n    ,   timeEnd : function(logId, type, label){\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.timeEnd(label)\n\n            if(loggerBuffer.timeMap[label] != undefined){\n                loggerBuffer._addToBuffer({\n                    status  : \"TimeEnd\"\n                ,   date    : new Date()\n                ,   type    : type\n                ,   id      : logId\n                ,   msg     : label + \" : \" + ((new Date).getTime() - loggerBuffer.timeMap[label]) + \" ms!\"\n                })\n\n                loggerBuffer.timeMap[label] = undefined\n            }\n\n            else\n                loggerBuffer._addToBuffer({\n                    status  : \"TimeEnd\"\n                ,   date    : new Date()\n                ,   type    : type\n                ,   id      : logId\n                ,   msg     : label + \" : timer has not been initialized!\"\n                })\n\n            return this\n        }\n\n    ,   trace : function(logId, type){\n\n            var getStackTrace = function() {\n                var object = {}\n                Error.captureStackTrace(object, getStackTrace)\n                return object.stack\n            }\n\n            loggerBuffer._addToBuffer({\n                status  : \"Trace\"\n            ,   date    : new Date()\n            ,   type    : type\n            ,   id      : logId\n            ,   msg     : getStackTrace()\n            })\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.trace()\n            return this\n        }\n\n    ,   warn : function(){\n\n            var arguments = Array.prototype.slice.call(arguments, 0)\n            var logId     = arguments[0]\n            var type      = arguments[1]\n\n            // istanbul ignore else\n            if(this.isValid(logId, type) && this.mode == LoggerEnum.MODE.NOISY)\n                console.warn.apply(console, arguments.slice(2))\n\n            loggerBuffer._addToBuffer({\n                status  : \"Warning\"\n            ,   date    : new Date()\n            ,   type    : type\n            ,   id      : logId\n            ,   msg     : arguments.slice(2).join(\" \")\n            })\n\n            return this\n        }\n    }\n\n    var logger = new Logger()\n\n    for(var key in LoggerEnum.LOGTYPE){\n\n        (function(_ns){\n\n            Logger.prototype[_ns] = {\n\n                count : function(logId, label){\n\n                    logger.count(logId, _ns, label)\n                }\n\n            ,   error : function(){\n\n                    var arguments = Array.prototype.slice.call(arguments, 0)\n                    arguments.splice(1, 0, _ns)\n                    Logger.prototype.error.apply(logger, arguments)\n                }\n\n            ,   group : function(){\n\n                    var arguments = Array.prototype.slice.call(arguments, 0)\n                    arguments.splice(1, 0, _ns)\n                    Logger.prototype.group.apply(logger, arguments)\n                }\n\n            ,   groupCollapsed : function(){\n\n                    var arguments = Array.prototype.slice.call(arguments, 0)\n                    arguments.splice(1, 0, _ns)\n                    Logger.prototype.groupCollapsed.apply(logger, arguments)\n                }\n\n            ,   groupEnd : function(logId){\n\n                    logger.groupEnd(logId, _ns)\n                }\n\n            ,   info : function(){\n\n                    var arguments = Array.prototype.slice.call(arguments, 0)\n                    arguments.splice(1, 0, _ns)\n                    Logger.prototype.info.apply(logger, arguments)\n                }\n\n            ,   log : function(){\n\n                    var arguments = Array.prototype.slice.call(arguments, 0)\n                    arguments.splice(1, 0, _ns)\n                    Logger.prototype.log.apply(logger, arguments)\n                }\n\n            ,   profile : function(logId, label){\n\n                    logger.profile(logId, _ns, label)\n                }\n\n            ,   profileEnd : function(logId){\n\n                    logger.profileEnd(logId, _ns)\n                }\n\n            ,   time : function(logId, label){\n\n                    logger.time(logId, _ns, label)\n                }\n\n            ,   timeEnd : function(logId, label){\n\n                    logger.timeEnd(logId, _ns, label)\n                }\n\n            ,   trace : function(logId){\n\n                    logger.trace(logId, _ns)\n                }\n\n            ,   warn : function(){\n\n                    var arguments = Array.prototype.slice.call(arguments, 0)\n                    arguments.splice(1, 0, _ns)\n                    Logger.prototype.warn.apply(logger, arguments)\n                }   \n            }\n        })(key.toLowerCase())\n    }\n\n    window.logger     = logger\n    window.silentMode = logger.silentMode.bind(logger)\n    window.noisyMode  = logger.noisyMode.bind(logger)\n\n    // istanbul ignore next\n    window.onbeforeunload = function(){\n\n        loggerBuffer._flushBuffer()\n    }\n\n    return logger\n}])\n\n.factory(\"loggerBuffer\", [\n\n    \"$http\" \n\n,   function($http){\n\n    function LoggerBuffer(){\n\n        this.bufferLimit = 100\n        this.bufferLogs  = []\n        this.timeMap     = {}\n    }\n\n    LoggerBuffer.prototype = {\n \n        constructor : LoggerBuffer\n\n    ,   _addToBuffer : function(input){\n\n            // istanbul ignore else\n            if(this.bufferLogs.length < this.bufferLimit)\n                this.bufferLogs.push(input)\n\n            // istanbul ignore else\n            if(this.bufferLogs.length == this.bufferLimit)\n                this._flushBuffer()\n\n            return true\n        }\n\n    ,   _setBufferLimit : function(limit){\n\n            // istanbul ignore else\n            if(limit <= 0 || limit <= this.bufferLogs.length)\n                return false\n\n            this.bufferLimit = limit\n            return true \n        }\n\n    ,   _cleanBuffer : function(){\n\n            this.bufferLogs = []\n            return true\n        }\n\n    ,   _flushBuffer : function(){\n\n            var model = this\n\n            $http.post('/api/log', this.bufferLogs)\n\n            .success(function(data) {\n\n                //TODO Post to a server\n                model._cleanBuffer()\n            })\n        }   \n    }\n\n    return new LoggerBuffer()\n}])",
			"file": "/Users/Taveira/Desktop/dev/alert/asgard/modules/logger/src/logger.serv.js",
			"file_size": 12816,
			"file_write_time": 1408624913000000,
			"settings":
			{
				"buffer_size": 12816,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/Taveira/Desktop/dev/alert/asgard/app.js",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/Taveira/Desktop/dev/alert/asgard/maincontroller.js",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"php",
				"Set Syntax: PHP"
			]
		],
		"width": 472.0
	},
	"console":
	{
		"height": 118.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/Taveira/Desktop/dev/alert/asgard/index.html",
		"/Users/Taveira/Desktop/dev/alert/asgard/modules/logger/spec/logger.spec.js",
		"/Users/Taveira/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/Taveira/Desktop/dev/taveira/logger.js",
		"/Users/Taveira/Desktop/dev/taveira/maincontroller.js",
		"/Users/Taveira/Desktop/dev/taveira/scenario.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/scenario.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/app.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/example.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/karma.conf.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/Gruntfile.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/angular.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/Manual.txt",
		"/Users/Taveira/Desktop/dev/alert/asgard/modules/logger/spec/test.spec.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/angular-mocks.js",
		"/Users/Taveira/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/Taveira/Desktop/dev/alert/asgard/angular-scenario.js",
		"/Users/Taveira/Desktop/dev/alert/asgard/angular/src/auto/injector.js",
		"/Users/Taveira/Desktop/PROG2/tp3.c",
		"/Users/Taveira/Desktop/T3/tabdispersao.h",
		"/Users/Taveira/Desktop/T3/tabdispersao.c",
		"/Users/Taveira/Desktop/T3/labirinto.c",
		"/Users/Taveira/Desktop/T3/grafo.h",
		"/Users/Taveira/Desktop/T3/grafo.c",
		"/Users/Taveira/Desktop/SopeAulas/aula9/2a.c",
		"/Users/Taveira/Desktop/SopeAulas/aula9/1a.c",
		"/Users/Taveira/Desktop/SopeAulas/aula8/father.c",
		"/Users/Taveira/Desktop/sope/sope/monitor.c",
		"/Users/Taveira/Documents/workspace/sdisteste/backups/29c20bc3abcd42e64e7ec65169a50bef849fa787a148d9b08d687934ab3877f4/0.chunk",
		"/Users/Taveira/Documents/workspace/sdis/src/protocols/Peer.java",
		"/Users/Taveira/Downloads/T1Gxx/src/cli/Peer.java",
		"/Users/Taveira/Downloads/T1Gxx/src/sender/Sender.java",
		"/Users/Taveira/Downloads/MulticastClient.java",
		"/Users/Taveira/Downloads/MulticastServer.java",
		"/Users/Taveira/Downloads/Service.java",
		"/Users/Taveira/Downloads/ServiceAds.java",
		"/Users/Taveira/Desktop/LBAW/yana/template_nav.html",
		"/Users/Taveira/Desktop/LBAW/yana/piu_register.html",
		"/Users/Taveira/Desktop/LBAW/piu_editing.html",
		"/Users/Taveira/Desktop/LBAW/yana/piu_home.html",
		"/Users/Taveira/Desktop/SOPE/aula2/8a.c",
		"/Users/Taveira/Desktop/LBAW Template/lbaw.css",
		"/Users/Taveira/Desktop/site mae/cv.css",
		"/Users/Taveira/Desktop/site mae/cv.html",
		"/Users/Taveira/Desktop/SOPE/aula2/2a.c",
		"/Users/Taveira/Desktop/diana.txt",
		"/Users/Taveira/Desktop/XML.xml",
		"/Users/Taveira/Desktop/php.php",
		"/Applications/MAMP/www/soma.html",
		"/Applications/MAMP/www/soma.php"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"."
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"App",
			"Source",
			"Component",
			"clear",
			"getStacktrace",
			"LOGTYPE.",
			"MODE.",
			"MODE",
			"ngdoc module",
			"module",
			"tabela",
			"t",
			";\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"tab"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/Taveira/Desktop/dev/alert/asgard/scenario.js",
					"settings":
					{
						"buffer_size": 1789,
						"regions":
						{
						},
						"selection":
						[
							[
								725,
								725
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "logger.sublime-project",
					"settings":
					{
						"buffer_size": 65,
						"regions":
						{
						},
						"selection":
						[
							[
								55,
								55
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "readme.md",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/Taveira/Desktop/dev/alert/asgard/modules/logger/src/logger.serv.js",
					"settings":
					{
						"buffer_size": 12816,
						"regions":
						{
						},
						"selection":
						[
							[
								110,
								110
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/Taveira/Desktop/dev/alert/asgard/app.js",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/Taveira/Desktop/dev/alert/asgard/maincontroller.js",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.474454506426,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 27.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"s",
				"scenario.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 171.0,
	"status_bar_visible": false
}
